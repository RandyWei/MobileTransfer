// This file was generated by PermissionsDispatcher. Do not modify!
package com.chinahrt.w.mobiletransfer

import android.support.v4.app.ActivityCompat
import java.lang.ref.WeakReference
import kotlin.Array
import kotlin.Int
import kotlin.IntArray
import kotlin.String
import permissions.dispatcher.PermissionRequest
import permissions.dispatcher.PermissionUtils

private val REQUEST_DOACACHENEEDSPERMISSION: Int = 0

private val PERMISSION_DOACACHENEEDSPERMISSION: Array<String> = arrayOf("android.permission.READ_EXTERNAL_STORAGE")

private val REQUEST_STARTSERVER: Int = 1

private val PERMISSION_STARTSERVER: Array<String> = arrayOf("android.permission.READ_EXTERNAL_STORAGE")

fun MainActivity.startServerWithPermissionCheck() {
  if (PermissionUtils.hasSelfPermissions(this, *PERMISSION_STARTSERVER)) {
    startServer()
  } else {
    if (PermissionUtils.shouldShowRequestPermissionRationale(this, *PERMISSION_STARTSERVER)) {
      ACacheShowRationale(MainActivityStartServerPermissionRequest(this))
    } else {
      ActivityCompat.requestPermissions(this, PERMISSION_STARTSERVER, REQUEST_STARTSERVER)
    }
  }
}

fun MainActivity.doACacheNeedsPermissionWithPermissionCheck() {
  if (PermissionUtils.hasSelfPermissions(this, *PERMISSION_DOACACHENEEDSPERMISSION)) {
    doACacheNeedsPermission()
  } else {
    if (PermissionUtils.shouldShowRequestPermissionRationale(this, *PERMISSION_DOACACHENEEDSPERMISSION)) {
      ACacheShowRationale(MainActivityDoACacheNeedsPermissionPermissionRequest(this))
    } else {
      ActivityCompat.requestPermissions(this, PERMISSION_DOACACHENEEDSPERMISSION, REQUEST_DOACACHENEEDSPERMISSION)
    }
  }
}

fun MainActivity.onRequestPermissionsResult(requestCode: Int, grantResults: IntArray) {
  when (requestCode) {
    REQUEST_STARTSERVER ->
     {
      if (PermissionUtils.verifyPermissions(*grantResults)) {
        startServer()
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(this, *PERMISSION_STARTSERVER)) {
          ACacheOnNeverAskAgain()
        } else {
          ACacheOnPermissionDenied()
        }
      }
    }
    REQUEST_DOACACHENEEDSPERMISSION ->
     {
      if (PermissionUtils.verifyPermissions(*grantResults)) {
        doACacheNeedsPermission()
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(this, *PERMISSION_DOACACHENEEDSPERMISSION)) {
          ACacheOnNeverAskAgain()
        } else {
          ACacheOnPermissionDenied()
        }
      }
    }
  }
}

private class MainActivityStartServerPermissionRequest(target: MainActivity) : PermissionRequest {
  private val weakTarget: WeakReference<MainActivity> = WeakReference(target)

  override fun proceed() {
    val target = weakTarget.get() ?: return
    ActivityCompat.requestPermissions(target, PERMISSION_STARTSERVER, REQUEST_STARTSERVER)
  }

  override fun cancel() {
    val target = weakTarget.get() ?: return
    target.ACacheOnPermissionDenied()
  }
}

private class MainActivityDoACacheNeedsPermissionPermissionRequest(target: MainActivity) : PermissionRequest {
  private val weakTarget: WeakReference<MainActivity> = WeakReference(target)

  override fun proceed() {
    val target = weakTarget.get() ?: return
    ActivityCompat.requestPermissions(target, PERMISSION_DOACACHENEEDSPERMISSION, REQUEST_DOACACHENEEDSPERMISSION)
  }

  override fun cancel() {
    val target = weakTarget.get() ?: return
    target.ACacheOnPermissionDenied()
  }
}
